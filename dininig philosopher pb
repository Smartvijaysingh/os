#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <semaphore.h>
#define f(i,a,b)     for(int i=a;i<b;i++)

#define N 100
#define MAX_SEC 1000000 //1 second

sem_t mutexx,spoon[N];
int n;

void *eat(void *number)
{
    int id = *(int *)number,tim;
    int temp = rand()%3 +1;
    f(i,0,temp)
    {


        tim = rand()%MAX_SEC;
        usleep(tim);

        sem_wait(&spoon[id-1]);
        sem_wait(&spoon[id%n]);

        tim = rand()%MAX_SEC;
        usleep(tim);
        printf("philospher %d is eating\n",id);
        tim = rand()%MAX_SEC;
        usleep(tim);
         printf("philospher %d is done eating\n",id);
        sem_post(&spoon[id%n]);
        sem_post(&spoon[id-1]);
    }
}

int main()
{
    srand(time(0)); // for random values according to current time and random

    pthread_t phil[N];
    int id[N];
    f(i,0,N)
    id[i] = i+1;



    printf("enter number of philosopher :\n");
    scanf("%d",&n);

    sem_init(&mutexx,0,1);
    f(i,0,n)
    sem_init(&spoon[i],0,1);

    f(i,0,n)
    pthread_create(&phil[i], NULL, eat , &id[i]);




    f(i,0,n)
    pthread_join(phil[i],NULL);

    sem_destroy(&mutexx);
    f(i,0,n)
    sem_destroy(&spoon[i]);

}
